using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Enemy_Sight : MonoBehaviour {

	public float Radius = 10;
	[Range(0,360)]
	public float Angle = 125;

	public float Delay_TillSpotPlayer = 2f;
	float timer_PlayerVisible;

	[HideInInspector] public Vector3 Position_Alerted;
	[HideInInspector] public Vector3 Position_Reset = new Vector3 (1000,1000,1000);

	CharacterController player_CharacterController;

	// Use this for initialization
	void Start () 
	{
		player_CharacterController = GameObject.FindGameObjectWithTag("Player").GetComponent<CharacterController>();
		Position_Alerted = Position_Reset;
	}
	
	// Update is called once per frame
	void Update () 
	{
		if(PlayerSighted()) timer_PlayerVisible += Time.deltaTime;
		else timer_PlayerVisible -= Time.deltaTime;

		timer_PlayerVisible = Mathf.Clamp(timer_PlayerVisible, 0, Delay_TillSpotPlayer);

		if(timer_PlayerVisible >= Delay_TillSpotPlayer && PlayerSighted()) 
		{
			Position_Alerted = player_CharacterController.bounds.center;
			Debug.Log(Position_Alerted);
		}
	}
		

	[HideInInspector] public bool PlayerSighted()
	{
		if(Vector3.Distance(transform.position, player_CharacterController.bounds.center) < Radius)
		{
			Vector3 direction = (player_CharacterController.bounds.center - transform.position).normalized;
			float angle = Vector3.Angle(transform.forward, direction);

			if(angle < Angle / 2)
			{
				RaycastHit hit;
				if(Physics.Raycast(transform.position, direction.normalized, out hit))
				{
					if(hit.collider.gameObject == player_CharacterController.gameObject)
					{
						Debug.DrawLine(transform.position, player_CharacterController.bounds.center, Color.red);	
						return true;
					}
				}
			}
		}
		Position_Alerted = Position_Reset;
		return false;
	}

	#region EditorGui
	//For Use in Editor Script
	//This simply draws a line for the spread of Angle by centering on transform.fwd, for use on EditorGUI
	//EditorScript already cuts Angle in half for this function
	public Vector3 DirectionFromAngle(float angleInDegrees, bool isGlobal) 
	{
		float halfAngle = angleInDegrees/2;
		if (!isGlobal) halfAngle += transform.eulerAngles.y;

		//Sin(90-x) == Cos(x)
		return new Vector3(Mathf.Sin(halfAngle * Mathf.Deg2Rad),0,Mathf.Cos(halfAngle * Mathf.Deg2Rad));
	}
	#endregion
}
