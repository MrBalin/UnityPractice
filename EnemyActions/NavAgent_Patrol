using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;

public class NavAgent_Patrol : MonoBehaviour
{
	public bool CanPatrol = false;


	[HideInInspector] public NavMeshAgent Agent;
	public Transform Path;
	[HideInInspector] public  List<Vector3> wayPoints = new List<Vector3>();
	[HideInInspector] public  int currentWp = 0;
	public type Type_Patrol = type.Loop;
	public enum type
	{
		PlayOnce,
		Loop,
		PingPong,
		None
	}
	private bool PingPonged = true;
	public float Speed_Patrol = 1;
	public float Delay_Patrol = 1;
	private float timer_Patrol;

	bool isPatrolling;



	public float Speed_Turn = 90; //90 frames per second

	void Awake()
	{
		Agent = GetComponent<NavMeshAgent>();

		Agent.speed = Speed_Patrol;

		PlugInWaypoints();

		isPatrolling = true;
	}

	void Update()
	{
		if(CanPatrol && Type_Patrol != type.None) Patrolling();
	}

	void PlugInWaypoints()
	{
		//WayPointsFolder CANNOT be child of the moving agent
		foreach (Transform child in Path) wayPoints.Add(child.position);
		if (wayPoints.Count == 0) Debug.LogError("No Path/Points found for ", transform);
	}


	public void Patrolling()
	{
		//if Moving, how close are we to the destination?
		if (isPatrolling && Agent.remainingDistance <= .2f)
		{
			StartCoroutine(Path_Traverse());
		}
	}

	IEnumerator Path_Traverse()
	{
		isPatrolling = false;
		GetNextWP();
		yield return new WaitForSeconds(Delay_Patrol);
		yield return StartCoroutine(Turn_ToTarget(wayPoints[currentWp]));
		Agent.SetDestination(wayPoints[currentWp]);
		isPatrolling = true;
		yield return null;
	}


	IEnumerator Turn_ToTarget(Vector3 target)
	{
		Vector3 direction = (target - transform.position).normalized;
		float angle_Target = 90 - Mathf.Atan2(direction.z,direction.x) * Mathf.Rad2Deg;

		while (Mathf.Abs(Mathf.DeltaAngle(transform.eulerAngles.y, angle_Target)) > .05f) 
		{
			float angle_Temp = Mathf.MoveTowardsAngle(transform.eulerAngles.y, angle_Target, Speed_Turn * Time.deltaTime);
			transform.eulerAngles = Vector3.up * angle_Temp;
			yield return null;
		}
	}


	void GetNextWP()
	{
		//this would be the time/place to set player found v3

		switch (Type_Patrol)
		{
		case type.Loop:
			//if at end of list, restart at zero, else go to next in line
			currentWp = (currentWp == wayPoints.Count - 1) ? 0 : currentWp += 1;

			break;

		case type.PlayOnce:
			if (currentWp != wayPoints.Count - 1) currentWp++;
			if (currentWp == wayPoints.Count) Agent.Stop();

			break;

		case type.PingPong:
			if (currentWp == wayPoints.Count - 1) PingPonged = false;
			else if (currentWp == 0) PingPonged = true;
			currentWp = (PingPonged) ? currentWp += 1 : currentWp -= 1;

			break;
		case type.None:
			
			break;
		}
	}


	void OnDrawGizmos()
	{
		if(Path != null)
		{
			Vector3 startPoint = Path.GetChild(0).position;
			Vector3 previousPoint = startPoint;

			foreach (Transform point in Path) 
			{
				Gizmos.color = Color.cyan;
				Gizmos.DrawWireSphere(point.position, .3f);

				Gizmos.color = Color.blue;
				Gizmos.DrawLine(previousPoint, point.position);
				previousPoint = point.position;
			}
			Gizmos.DrawLine(previousPoint, startPoint);
		}
	}
}
